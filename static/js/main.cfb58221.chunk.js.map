{"version":3,"sources":["scripts/logger.ts","scripts/calculator.ts","App.tsx","index.tsx"],"names":["LogToConsole","data","console","log","Calculator","logger","operators","x","y","Math","pow","op_prior","undefined","this","expr","length","substring","replace","trim","stack","result","split","token","push","o","pop","forEach","parseFloat","prn","toPRN","res","evalPNR","isNaN","App","useState","output","setOutput","setExpr","Oleg","handleClick","event","preventDefault","div","currentTarget","id","ans","calc","toString","buttons","map","button","className","onClick","style","margin","opacity","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfb58221.chunk.js","sourcesContent":["import * as fs from 'fs';\r\nimport fetch from 'cross-fetch';\r\n\r\ninterface Logger {\r\n  log(data: string): void;\r\n}\r\n\r\nclass LogToConsole implements Logger {\r\n  public log(data: string): void {\r\n    console.log(data);\r\n  }\r\n}\r\n\r\nclass LogToFile implements Logger {\r\n  private path: string;\r\n\r\n  constructor(path: string) {\r\n    this.path = path;\r\n  }\r\n\r\n  public log(data: string): void {\r\n    fs.appendFile(this.path, data + '\\n',\r\n      (err) => {\r\n        if (err) throw err\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nclass LogToRemoteServer implements Logger {\r\n  private url: string = 'http://127.0.0.1:3000/logger';\r\n\r\n  constructor(url?: string) {\r\n    if (url != undefined) {\r\n      this.url = url;\r\n    }\r\n  }\r\n\r\n  public log(data: string): void {\r\n    fetch(this.url, {\r\n      method: 'PUT',\r\n      body: data\r\n    });\r\n  }\r\n}\r\n\r\nclass NoLogging implements Logger {\r\n  public log(data: string): void { }\r\n}\r\n\r\nexport type { Logger };\r\nexport { LogToConsole, LogToFile, LogToRemoteServer, NoLogging };","import { Logger, LogToConsole } from './logger'\r\n\r\nclass Calculator {\r\n  private logger: Logger = new LogToConsole;\r\n  private operators: { [key: string]: Function } = {\r\n    '+': (x: number, y: number) => x + y,\r\n    '-': (x: number, y: number) => x - y,\r\n    '*': (x: number, y: number) => x * y,\r\n    '/': (x: number, y: number) => x / y,\r\n    '^': (x: number, y: number) => Math.pow(x, y),\r\n    '%': (x: number, y: number) => x % y\r\n  };\r\n  private op_prior: { [key: string]: number } = {\r\n    '(': 0, ')': 0,\r\n    '+': 1, '-': 1,\r\n    '*': 2, '/': 2, '%': 2,\r\n    '^': 3\r\n  }\r\n\r\n  constructor(logger?: Logger) {\r\n    if (logger != undefined) {\r\n      this.logger = logger;\r\n    }\r\n  }\r\n\r\n  public setLogger(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  private toPRN(expr: string): string | undefined {\r\n    if (expr[expr.length - 1] == ' ') {\r\n      expr = expr.substring(0, expr.length - 1);\r\n    }\r\n    if (expr[0] == ' ') {\r\n      expr = expr.substring(1, expr.length);\r\n    }\r\n    expr = expr.replace(/\\s+/g, ' ').trim()\r\n\r\n    let stack: string[] = [];\r\n    let result: string = '';\r\n\r\n    for (let token of expr.split(' ')) {\r\n      if (token in this.op_prior) {\r\n        switch (token) {\r\n          case '(':\r\n            stack.push(token);\r\n            break;\r\n          case ')':\r\n            while (1) {\r\n              let o = stack.pop();\r\n              if (o == undefined) {\r\n                return undefined;\r\n              }\r\n              if (o == '(') {\r\n                break;\r\n              }\r\n              result += o + ' ';\r\n            }\r\n            break;\r\n          default:\r\n            while (1) {\r\n              let o = stack.pop();\r\n              if (o == undefined) {\r\n                break;\r\n              }\r\n              if (this.op_prior[o] < this.op_prior[token]) {\r\n                stack.push(o);\r\n                break;\r\n              }\r\n              result += o + ' ';\r\n            }\r\n            stack.push(token);\r\n            break;\r\n        }\r\n      }\r\n      else {\r\n        result += token + ' ';\r\n      }\r\n    }      \r\n\r\n    while (1) {\r\n      let token = stack.pop();\r\n      if (token == undefined) {\r\n        break;\r\n      }\r\n      if (!(token in this.operators)) {\r\n        return undefined;\r\n      }\r\n      result += token + ' ';\r\n    }\r\n\r\n    result = result.substring(0, result.length - 1);\r\n\r\n    return result;\r\n  }\r\n\r\n  private evalPNR(expr: string): number | undefined {\r\n    let stack: number[] = [];\r\n\r\n    expr.split(' ').forEach((token) => {\r\n      if (token in this.operators) {\r\n        let [y, x] = [stack.pop(), stack.pop()];\r\n        stack.push(this.operators[token](x, y));\r\n      } else {\r\n        stack.push(parseFloat(token));\r\n      }\r\n    });\r\n\r\n    return stack.pop();\r\n  }\r\n\r\n  public calc(expr: string): number | undefined {\r\n    let prn: string | undefined = this.toPRN(expr);\r\n    if (prn == undefined) {\r\n      this.logger.log('Error: invalid expression.');\r\n      return undefined;\r\n    }\r\n\r\n    let res: number | undefined = this.evalPNR(prn); \r\n    if (res == undefined || isNaN(res)) {\r\n      this.logger.log('Error: can\\'t evaluate prn expression.');\r\n      return undefined;\r\n    }\r\n\r\n    return res;\r\n  }\r\n}\r\n\r\nexport default Calculator;","import React, { useState } from 'react';\nimport './App.css';\nimport Calculator from './scripts/calculator'\n\nfunction App() {\n  const [output, setOutput] = useState('');\n  const [expr, setExpr] = useState('');\n  const Oleg: Calculator = new Calculator();\n\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const div: HTMLDivElement = event.currentTarget;\n    if (div.id == '=') {\n      if (expr.length) {\n        let ans: number | undefined = Oleg.calc(\n          expr[expr.length - 1] == ' ' ? expr.substring(0, expr.length - 1) : expr\n        );\n        if (ans == undefined) {\n          setOutput(output + (expr.length != 0 ? '\\n': '') + 'error' + '\\n');\n        }\n        else {\n          setOutput(output + '\\n' + 'ans: ' + ans.toString() + '\\n');\n        }\n        setExpr('');\n      }\n    }\n    else if (div.id == 'AC') {\n      setOutput(output.substring(0, output.length - expr.length));\n      setExpr('');\n    }\n    else if (div.id == 'C') {\n      if (expr.length) {\n        setOutput(output.substring(0, output.length - 1));\n        setExpr(expr.substring(0, expr.length - 1));\n      }\n    }\n    else if (div.id >= '0' && div.id <= '9' || div.id == '.') {\n      setOutput(output + div.id);\n      setExpr(expr + div.id);\n    }\n    else {\n      setOutput(output + ' ' + div.id + ' ');\n      setExpr(expr + ' ' + div.id + ' ');\n    }\n  }\n\n  const buttons: JSX.Element[] = [\n    '+', '-', '*', '/',\n    '%', '^', '(', ')',\n    '.', '=', '0', '1',\n    '2', '3', '4', '5',\n    '6', '7', '8', '9',\n    'C', 'AC'\n  ].map(button =>\n    <div \n      className=\"button\"\n      id={button}\n      onClick={handleClick}\n      key={button}\n    >\n      {button}\n    </div>\n  );\n\n  return (\n    <div className=\"App\"> \n      <h1>Calculator 1337</h1>\n      <div className=\"main\">\n        <div className=\"output\">\n          { \n            output ? '' : \n            <h5 style={{margin: \"5px\", opacity: \"0.5\"}}>\n              type here something...\n            </h5>\n          }\n          { output }\n        </div>\n        <div className=\"buttons\">\n          <div id=\"operators\">\n            { buttons.slice(0, 10) }\n          </div>\n          <div id=\"numbers\">\n            { buttons.slice(10, 22) }\n          </div>   \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}